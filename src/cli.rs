// Copyright 2016 LambdaStack All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use clap::{App, Arg, SubCommand};

static DEFAULT_USER_AGENT: &'static str = concat!(env!("CARGO_PKG_NAME"), "/", env!("CARGO_PKG_VERSION"));

pub fn build_cli<'a>(app: &str, config_dir: &'a str, version: &'a str) -> App<'a, 'a> {
  App::new(app)
    .about("klaus")
    .author("Chris Jones")
    .version(version)
    .after_help("For more information about a specific command, try `klaus <command> --help`\nSource code for klaus available at: https://github.com/lambdastackio/klaus")
    .arg(Arg::with_name("bench")
        .short("b")
        .long("bench")
        .value_name("Format: N:N:N:N:N:A (N - Number, A - Alpha)")
        .help("Benchmarking command: AAA:BBB:CCC:DDD:EEE:F AAA - Duration in seconds, BBB - Iterations (must be 0 if using duration), CCC - Virtual Users (threads), DDD - Hosts (only 1 for now), EEE - Ramp up time (0 - Thundering Heard, anythig else spread out), F - Summary or Detail (must be S or D). MUST set `-f noneall` when using this option.")
        .takes_value(true))
    .arg(Arg::with_name("cache")
        .long("cache")
        .value_name("cache IP:PORT")
        .default_value("127.0.0.1:6379")
        .help("Specify the IP:PORT of caching server (master). Default port is 6379")
        .takes_value(true))
    .arg(Arg::with_name("config")
        .short("c")
        .long("config")
        .value_name("FILE")
        .default_value(config_dir)
        .help("Sets a custom config file.")
        .takes_value(true))
    .arg(Arg::with_name("daemonize")
        .short("d")
        .long("daemonize")
        .help("Overrides the default of TRUE for daemonization. Useful for server in foreground"))
    .arg(Arg::with_name("endpoint")
        .short("e")
        .long("endpoint")
        .value_name("URL:<port>")
        .help("Outbound - Sets a custom endpoint URL:<port> (port is optional). Default is AWS default endpoints based on Region")
        .takes_value(true))
    .arg(Arg::with_name("base-path")
        .short("f")
        .long("base-path")
        .value_name("public")
        .default_value("public")
        .help("Location of the base path of where the site files are located. Default is 'public' (relative to where app is located) but could be /var/www/html")
        .takes_value(true))
    .arg(Arg::with_name("generate-bash-completions")
        .short("g")
        .long("generate-bash-completions")
        .help("Outputs bash completions"))
    .arg(Arg::with_name("bucket-virtual-host")
        .short("h")
        .long("bucket-virtual-host")
        .help("Overrides the default of TRUE for virtual buckets. Useful for non AWS environments"))
    .arg(Arg::with_name("ip")
        .short("i")
        .long("ip")
        .value_name("IP Address")
        .default_value("127.0.0.1")
        .help("Sets the IP Address")
        .takes_value(true))
    .arg(Arg::with_name("pid")
        .short("j")
        .long("pid")
        .value_name("PID file location")
        .default_value("/tmp")//"/var/run")
        .help("Overrides the default PID file location")
        .takes_value(true))
    .arg(Arg::with_name("run-as-user")
        .short("k")
        .long("run-as-user")
        .value_name("User to run as")
        .default_value("nobody")
        .help("Overrides the default user of 'nobody' to run server as")
        .takes_value(true))
    .arg(Arg::with_name("log")
        .short("l")
        .long("log")
        .value_name("Log file location")
        .default_value("/tmp")//"/var/log")
        .help("Overrides the default log file location")
        .takes_value(true))
    .arg(Arg::with_name("run-in-group")
        .short("m")
        .long("run-in-group")
        .value_name("Belongs to group to run")
        .default_value("daemon")
        .help("Overrides the default group of 'daemon' to run server in")
        .takes_value(true))
    .arg(Arg::with_name("port")
        .short("p")
        .long("port")
        .value_name("Port of IP Address")
        .default_value("8000")
        .help("Sets the port of the IP Address")
        .takes_value(true))
    .arg(Arg::with_name("quiet")
        .short("q")
        .long("quiet")
        .help("No output is produced"))
    .arg(Arg::with_name("rate")
        .long("rate")
        .value_name("rate <g|t:number:time> - i.e., g:100:1: - global 100 requests per second")
        .help("Rate limiting option - g or t (global or token), number of requests, time duration in seconds")
        .takes_value(true))
    .arg(Arg::with_name("region")
        .short("r")
        .long("region")
        .value_name("Region")
        .default_value("UsEast1")
        .help("Outbound - Sets S3 Region.")
        .takes_value(true))
    .arg(Arg::with_name("signature")
        .short("s")
        .long("signature")
        .value_name("V2 or V4")
        .default_value("V4")
        .help("Outbound - Sets an API Signature version for S3 calls.")
        .takes_value(true))
    .arg(Arg::with_name("time")
        .short("t")
        .long("time")
        .help("Track time duration of operation(s)"))
    .arg(Arg::with_name("user-agent")
        .short("u")
        .long("user-agent")
        .value_name("User-agent")
        .default_value(DEFAULT_USER_AGENT)
        .help("Outbound - Sets the user-agent string.")
        .takes_value(true))
    .arg(Arg::with_name("proxy")
        .short("x")
        .long("proxy")
        .value_name("URL:<port>")
        .help("Outbound - Sets a custom proxy URL:<port>. Default is to use http(s)_proxy and no_proxy")
        .takes_value(true))
    .subcommand(SubCommand::with_name("bench")
        .about("Benchmarking: klaus bench <command> <options>")
        .subcommand(SubCommand::with_name("gen")
            .about("Benchmarking Gen files (only if desired): s3lsio bench gen <path> s3://<bucket>/<object> <size>. Generates synthetic files of a given size.")
            .arg_from_usage("[bucket] 'Bucket name'")
            .arg_from_usage("[path] 'Path'")
            .arg_from_usage("[size] 'Size of file'"))
        .subcommand(SubCommand::with_name("get")
            .about("Benchmarking GET Object: s3lsio bench get s3://<bucket>/<object>")
            .arg_from_usage("[bucket] 'Bucket name/object name'"))
      .subcommand(SubCommand::with_name("put")
         .about("Benchmarking PUT Object: s3lsio bench put s3://<bucket>/<object> <size> <size-of-parts>")
         .arg_from_usage("[bucket] 'Bucket name'")
         .arg_from_usage("[size] 'Size of object in bytes'")
         .arg_from_usage("[size_of_parts] 'Size of each part for multipart upload'"))
      .subcommand(SubCommand::with_name("range")
         .about("Benchmarking Byte-Range request of Object: s3lsio bench range <offset> <len> s3://<bucket>/<object>")
         .arg_from_usage("[offset] 'Range begin offset'")
         .arg_from_usage("[len] 'Range len'")
         .arg_from_usage("[bucket] 'Bucket name/object name'")))
    .subcommand(SubCommand::with_name("admin")
        .about("Admin Options: klaus admin <command> <options>")
        .subcommand(SubCommand::with_name("bucket")
            .about("Admin Bucket Options: s3lsio admin bucket <command> s3://<bucket> <user> <stats> <fix> <check>")
            .arg_from_usage("[command] 'Commands: delete - Delete, ls - List, stats - stats, link - Link, policy - Policy, unlink - Unlink, index - Index'")
            .arg_from_usage("[bucket] 'Bucket name or Bucket/Object name'")
            .arg_from_usage("[user] 'User ID (uid) (Not required on delete)'")
            .arg_from_usage("[stats] '(Optional) - true or false. Default is false. Only used with stats command'")
            .arg_from_usage("[fix] '(Optional) - true or false. Default is false. Only used with index command'")
            .arg_from_usage("[check] '(Optional) - true or false. Default is false. Only used with index command'"))
       .subcommand(SubCommand::with_name("quota")
          .about("Admin Quota Options: s3lsio admin quota <user> <command> <action> <size> <count>")
          .arg_from_usage("[user] 'User ID (uid)'")
          .arg_from_usage("[command] 'Commands: bucket - Bucket, user - User'")
          .arg_from_usage("[action] 'Action: get - Get, set - Set, enable - Enable quota, disable - Disable quota'")
          .arg_from_usage("[size] 'Quota size - max size in KB (defaults to 0)'")
          .arg_from_usage("[count] 'Quota object count - max number of objects (defaults to 0)'"))
       .subcommand(SubCommand::with_name("cap")
          .about("Admin Caps Admin User: s3lsio admin cap <user> <caps>")
          .arg_from_usage("[user] 'User ID (uid)'")
          .arg_from_usage("[caps] 'Admin Capability of user'"))
       .subcommand(SubCommand::with_name("user")
          .about("Admin User Options: s3lsio admin user <commands> [options]")
          .subcommand(SubCommand::with_name("create")
             .about("Admin Create User: s3lsio admin user create <user> <display_name> <email> <access_key> <secret_key> <caps>")
             .arg_from_usage("[user] 'User ID (uid)'")
             .arg_from_usage("[display_name] 'Display name - multi-word names should be inside of quotation marks'")
             .arg_from_usage("[email] '(Optional) User email (optional)'")
             .arg_from_usage("[access_key] '(Optional) Access Key ID'")
             .arg_from_usage("[secret_key] '(Optional) Secret Key ID'")
             .arg_from_usage("[suspended] '(Optional) Suspend user. Defaults to false'")
             .arg_from_usage("[caps] '(Optional) Capability of user'"))
          .subcommand(SubCommand::with_name("delete")
             .about("Admin Delete User: s3lsio admin user delete <user> <purge_data>")
             .arg_from_usage("[user] 'User ID (uid)'")
             .arg_from_usage("[purge_data] '(Optional) Purge data. Defaults to false'"))
          .subcommand(SubCommand::with_name("modify")
             .about("Admin Modify User: s3lsio admin user modify <user> <purge_data>")
             .arg_from_usage("[user] 'User ID (uid)'")
             .arg_from_usage("[display_name] '(Optional) Display name - multi-word names should be inside of quotation marks'")
             .arg_from_usage("[suspended] '(Optional) Suspend user. Defaults to false'")
             .arg_from_usage("[email] '(Optional) User email'")
             .arg_from_usage("[access_key] '(Optional) Access Key ID (optional)'")
             .arg_from_usage("[secret_key] '(Optional) Secret Key ID (optional)'")
             .arg_from_usage("[caps] '(Optional) Secret Key ID (optional)'")
             .arg_from_usage("[max_buckets] '(Optional) Maximum number of buckets. Defaults to 1000'"))
          .subcommand(SubCommand::with_name("get")
             .about("Admin Get User: s3lsio admin user get <user>")
             .arg_from_usage("[user] 'User ID (uid)'"))
          .subcommand(SubCommand::with_name("ls")
             .about("Admin List Users: s3lsio admin user ls")))
       .subcommand(SubCommand::with_name("usage")
          .about("Admin Usage Options: s3lsio admin usage ls <user> <start> <end> <show_entries> <show_summary>")
          .subcommand(SubCommand::with_name("ls")
             .arg_from_usage("[user] 'User ID (uid). If not supplied then the command applies to all users'")
             .arg_from_usage("[start] 'Start DateTime [yyyy-mm-dd hh:mm:ss] (optional)'")
             .arg_from_usage("[end] 'End DateTime [yyyy-mm-dd hh:mm:ss] (optional)'")
             .arg_from_usage("[show_entries] 'Specifies whether data entries should be returned [true or false] (Default is false)'")
             .arg_from_usage("[show_summary] 'Specifies whether data summary should be returned [true or false] (Default is false)'"))
          .subcommand(SubCommand::with_name("trim")
             .about("Admin Usage Options: s3lsio admin usage trim <user> <start> <end> <remove_all>")
             .arg_from_usage("[user] 'User ID (uid). If not supplied then the command applies to all users'")
             .arg_from_usage("[start] 'Start DateTime [yyyy-mm-dd hh:mm:ss] (optional)'")
             .arg_from_usage("[end] 'End DateTime [yyyy-mm-dd hh:mm:ss] (optional)'")
             .arg_from_usage("[remove_all] 'Remove all usage data [true or false] (optional except when no user is supplied)'")))
       .subcommand(SubCommand::with_name("keys")
          .about("Admin Keys Options: s3lsio admin keys <command> [options]")
          .subcommand(SubCommand::with_name("create")
             .about("Admin Keys Create: s3lsio admin keys create <user> <access_key> <secret_key> <generate_key>")
             .arg_from_usage("[user] 'User ID (uid)'")
             .arg_from_usage("[generate_key] '(Optional) Generate keys. Default is true'")
             .arg_from_usage("[access_key] '(Optional) Access Key ID'")
             .arg_from_usage("[secret_key] '(Optional) Secret Key ID'"))
         .subcommand(SubCommand::with_name("delete")
             .about("Admin Delete Keys: s3lsio admin keys delete <access_key> <user>")
             .arg_from_usage("[access_key] 'Access Key ID'")
             .arg_from_usage("[user] '(Optional) User ID (uid)'"))
         .subcommand(SubCommand::with_name("gen")
             .about("Admin Generate Keys (only): s3lsio admin keys gen <access_key> <secret_key>")
             .arg_from_usage("[access_key] '(Optional) Access Key ID (default to true)'")
             .arg_from_usage("[secret_key] '(Optional) Secret Key ID (default to true)'"))))
}
